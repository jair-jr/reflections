What happens when you initialize a repository? Why do you need to do it?
	Git creates a new repository. Git needs to create the ".git" containing repository metadata.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area contains the files the user wants to be committed, while the working directory may also contains files that should not be committed. The staging area allows users to selectively choose which changes they want committed to the directory.

How can you use the staging area to make sure you have one commit per logical
change?
	One can add to the staging area only the files belonging to a specific logical change, and execute the commit. Changed files not belonging to that logical change would be in the working directory but would no be committed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	A branch is useful to try out new things while preserving what is working.

How do the diagrams help you visualize the branch structure?
	Diagrams show commit history for different branches in a single graph. This eases visualizing the parent commit for each branch and which features they contain.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Merging two branches is like merging the last commit of each branch in a single commit, allowing all commits on both branches to be available from a single branch (the checkedout branch when the merge was performed). The commit resulting from the merge has two parents, one from each of the merged branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	Some merges can be done automatically while others cannot. When possible, it is always a good idea to perform automatic merging because it is faster and less error prone.
