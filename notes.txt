==========================
Git notes
==========================

Commands:

git log
  git log
    Shows commits ids and their messages.

  git log --graph --oneline <branch #1> <branch #2>
    Shows commit history considering branches #1 and #2. The "--oneline" shows each commit as one single line.

  git log -n <number-of-commits>
    Shows only the "number-of-commits" most recent commits.

git clone <url>
  Copies a repository A to another repository B, and sets repository A as B's remote.

git diff
  git diff
    Compares the working directory to the staging area

  git diff <commit id #1> <commit id #2>
    Compares commit #1 to commit #2.

  git diff --staged
    Compares the staging area to the most recent commit in the repository.

git show <commit id>
    Compares <commit id> to its parent.

git checkout
  git checkout <commit id>
    Changes the files in the working directory so that they are equal to those on <commit id>

  git checkout <branch>
    Changes the files in the working directory so that they are equal to those on the most recent commit in the <branch> branch.
    Ex.: git checkout master (checks out the most recent commit in the master branch)

  git checkout -b <new_branch>
    Creates a new branch and checks it out. Equivalent to: "git branch <new_branch>" "git checkout <new_branch>"

git init
  Initializes a git repository in the current directory, creating the ".git" meta-data directory.

git status
  Show a summary of the repository summary containing: 1) files in the staging area; 2) files out of the staging area; 3) the current branch

git add <file>
  Adds a file to the staging area.

git reset HEAD <file>
  Removes a file from the staging area.

git commit -m "Message"
  Commits the files in the staging area to the repository.
  Note: "git commit" (whithout -m) opens the core.editor for the user to type the commit message.

git config --global <property> <value>
  Changes git configuration by setting a global property value
  Ex.: git config --global core.editor "nano"

git branch
  git branch
    Shows the branches in the repository.

  git branch <new-branch>
    Creates a new branch in the repository.

  git branch -d <branch-name>
    Removes "branch-name" from the repository.

    Warning: this will delete all commits in the branch "branch-name" if it has not been merged with another branch. However, if "branch-name" was merged, only the label of the branch will be deleted, while the commits will remain intact.

git merge
  git merge <branch #1> <branch #2>
    Merges branch #1 and #2

    Note: "git merge" always merges into the checkedout branch. Therefore, branch #1 or #2 should be the checkedout branch. If a third branch, say branch #3, is checkedout, git will merge the three branches together.

    Note: "git merge" executes the merge and creates a new commit containing the merged files in the checkedout branch. This new commit has two parents which are the last commits from branches #1 and #2.

  git merge --abort
    Undoes the merge by restoring the files to the state they were before the merge. This is useful if there is a conflict during merge.

  Notes on solving a conflict: to tell git that a conflict is solved, simply remove the occurrences of git special sections like "<<<< HEAD" or ">>> master" or "|||| merged common ancestors" from the conflicted files, add those files to the staging area, and commit. It is good practice for the commit message to contain lines refering to the conflicted files. Git already adds those lines to the message. All we have to do is to uncomment them.

git remote

  git remote
    Shows the remote repositories associated with the local repository.

  git remote add <remote_repository_name> <remote_url>
    Associates a remote repository to the local one. If there is only one remote repository, it is commom practice to name it as "origin". Ex: git remote add origin git@github.com:jair-jr/reflections.git

git push <remote_repository_name> <branch>
  Sends commits in the local repository to the remote repository. Ex: git push origin master

git pull <remote_repository_name> <branch>
  Fetches commits from the remote repository to the local repository. Ex: git pull origin master
